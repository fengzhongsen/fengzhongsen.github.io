<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老冯博客</title>
  
  <subtitle>老冯的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fblog.top/"/>
  <updated>2018-03-16T15:15:34.000Z</updated>
  <id>http://fblog.top/</id>
  
  <author>
    <name>Sunny</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flex布局语法汇总</title>
    <link href="http://fblog.top/2018/03/16/Flex%E5%B8%83%E5%B1%80%E8%AF%AD%E6%B3%95%E6%B1%87%E6%80%BB/"/>
    <id>http://fblog.top/2018/03/16/Flex布局语法汇总/</id>
    <published>2018-03-16T14:59:31.000Z</published>
    <updated>2018-03-16T15:15:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言：Flex-布局分为多个版本，以下为最新版本语法汇总。"><a href="#前言：Flex-布局分为多个版本，以下为最新版本语法汇总。" class="headerlink" title="前言：Flex 布局分为多个版本，以下为最新版本语法汇总。"></a>前言：Flex 布局分为多个版本，以下为最新版本语法汇总。</h3><blockquote><p>其中注释所示皆假设主轴为水平方向，且从左到右。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">/* Flex 布局 属性 总结 */</span><br><span class="line">.box &#123;</span><br><span class="line">    display: flex;                    /* 弹性布局 */</span><br><span class="line">    display: inline-flex;             /* 行内元素 */</span><br><span class="line">    display: -webkit-flex;            /* [Safari] */</span><br><span class="line"></span><br><span class="line">    /* 属性决定主轴的方向（即项目的排列方向）。 */</span><br><span class="line">    flex-direction: row;              /* [默认值] 主轴为水平方向，起点在左端。 */</span><br><span class="line">    flex-direction: row-reverse;      /* 主轴为水平方向，起点在右端。 */</span><br><span class="line">    flex-direction: column;           /* 主轴为垂直方向，起点在上沿。 */</span><br><span class="line">    flex-direction: column-reverse;   /* 主轴为垂直方向，起点在下沿。 */</span><br><span class="line"></span><br><span class="line">    /* 定义如果一条轴线排不下，如何换行。 */</span><br><span class="line">    flex-wrap: nowrap;                /* [默认值] 不换行。 */</span><br><span class="line">    flex-wrap: wrap;                  /* 换行，第一行在上方。 */</span><br><span class="line">    flex-wrap: wrap-reverse;          /* 换行，第一行在下方。 */</span><br><span class="line"></span><br><span class="line">    /* 定义项目在主轴上如何对齐。 */</span><br><span class="line">    justify-content: flex-start;      /* [默认值] 左对齐 */</span><br><span class="line">    justify-content: flex-end;        /* 右对齐 */</span><br><span class="line">    justify-content: center;          /* 居中 */</span><br><span class="line">    justify-content: space-between;   /* 两端对齐，项目之间的间隔都相等。 */</span><br><span class="line">    justify-content: space-around;    /* 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。 */</span><br><span class="line"></span><br><span class="line">    /* 定义项目在交叉轴上如何对齐。 */</span><br><span class="line">    align-items: stretch;             /* [默认值] 如果项目未设置高度或设为auto，将占满整个容器的高度。 */</span><br><span class="line">    align-items: flex-start;          /* 交叉轴的起点对齐。 */</span><br><span class="line">    align-items: flex-end;            /* 交叉轴的终点对齐。 */</span><br><span class="line">    align-items: center;              /* 交叉轴的中点对齐。 */</span><br><span class="line">    align-items: baseline;            /* 项目的第一行文字的基线对齐。 */</span><br><span class="line"></span><br><span class="line">    /* 多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。 */</span><br><span class="line">    align-content: flex-start;        /* 与交叉轴的起点对齐。 */</span><br><span class="line">    align-content: flex-end;          /* 与交叉轴的终点对齐。 */</span><br><span class="line">    align-content: center;            /* 与交叉轴的中点对齐。 */</span><br><span class="line">    align-content: space-between;     /* 与交叉轴两端对齐，轴线之间的间隔平均分布。 */</span><br><span class="line">    align-content: space-around;      /* 每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item &#123;</span><br><span class="line">    order: 0;                          /* [默认值 0] 定义项目的排列顺序。数值越小，排列越靠前，默认为0。 */</span><br><span class="line"></span><br><span class="line">    flex-grow: 0;                      /* [默认值 0] 定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。 */</span><br><span class="line">    flex-shrink: 1;                    /* [默认值 1] 定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。 */</span><br><span class="line">    flex-basis: auto;                  /* [默认值 auto] 定义了在分配多余空间之前，项目占据的主轴空间（main size） */</span><br><span class="line"></span><br><span class="line">    flex: 0 1 auto;                    /* flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。 */</span><br><span class="line"></span><br><span class="line">    /* 允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。 */</span><br><span class="line">    align-self: auto;                  /* [默认值] 表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。 */</span><br><span class="line">    align-self: flex-start;            /* 与 align-items 一致 */</span><br><span class="line">    align-self: flex-end;              /* 与 align-items 一致 */</span><br><span class="line">    align-self: center;                /* 与 align-items 一致 */</span><br><span class="line">    align-self: baseline;              /* 与 align-items 一致 */</span><br><span class="line">    align-self: stretch;               /* 与 align-items 一致 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言：Flex-布局分为多个版本，以下为最新版本语法汇总。&quot;&gt;&lt;a href=&quot;#前言：Flex-布局分为多个版本，以下为最新版本语法汇总。&quot; class=&quot;headerlink&quot; title=&quot;前言：Flex 布局分为多个版本，以下为最新版本语法汇总。&quot;&gt;&lt;/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript之初级进阶</title>
    <link href="http://fblog.top/2017/12/04/JavaScript%E4%B9%8B%E5%88%9D%E7%BA%A7%E8%BF%9B%E9%98%B6/"/>
    <id>http://fblog.top/2017/12/04/JavaScript之初级进阶/</id>
    <published>2017-12-04T07:29:32.000Z</published>
    <updated>2017-12-04T08:32:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>前言：JavaScript知识笔记细碎，对于初学者来说，学完基本语法就不知道该怎么深入学习了。这篇博客只针对初学JavaScript的同学学完基本语法后的“进一步”深入学习。当然，这不是JavaScript的全部，在末尾我会给出“再进一步”的学习方向。</p><p>一、JavaScript基础<br>1、对变量提升的理解<br>变量定义和函数声明会被提升到当前作用域的顶部<br>2、this的应用场景<br>  ● 作为构造函数执行<br>  ● 作为对象属性执行<br>  ● 作为普通函数执行<br>  ● <code>call</code>、<code>apply</code>、<code>bind</code><br>3、如何理解作用域<br>  ● 自由变量<br>  ● 作用域链，及自由变量的查找<br>  ● 闭包的两个应用场景：参数作为返回值、函数作为参数传递<br>4、如何理解闭包<br>主要用于封装变量、收敛权限<br>5、同步和异步有什么区别<br>同步会阻塞代码执行，而异步不会。alert是同步，setTimeout是异步。<br>6、前端使用异步的场景<br>  ● 定时任务：setTimeout、setInterval<br>  ● 网络请求：ajax请求、动态<code>&lt;img&gt;</code>加载<br>  ● 事件绑定</p><p>二、Web-API<br>1、w3c标准中关于js的规定<br>  ● DOM操作<br>  ● BOM操作<br>  ● 事件绑定<br>  ● ajax请求（包括http协议）<br>  ● 存储<br>2、DOM（Document Object Model）<br>  ● 本质：为浏览器把HTML代码结构化成浏览器可识别并且js可操作的一个模型。<br>  ● 基本数据结构：树<br>  ● 常用API：1、获取DOM节点，以及节点的property和Attribute，2、获取父节点、获取子节点，3、新增节点、删除节点<br>  ● Attribute是HTML标签的属性，property是js对象的属性<br>3、BOM（Browser Object Model）<br>  ● navigator：检测浏览器类型 navigator.userAgent<br>  ● screen：screen.width  、screen.height<br>  ● location：herf、protocol（http:  、 https:）、host、pathname、search、hash<br>  ● history：history.back() 、 history.forward()<br>4、事件<br>  ● 通用的事件监听函数<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function bindEvent(elem, type, selector, fn) &#123;</span><br><span class="line">    if(fn == null) &#123;</span><br><span class="line">        fn = selector</span><br><span class="line">        selector = null</span><br><span class="line">    &#125;</span><br><span class="line">    elem.addEventListener(type, function(e) &#123;</span><br><span class="line">        var target</span><br><span class="line">        if(selector) &#123;</span><br><span class="line">            target = e.target</span><br><span class="line">            if(target.matches(selector)) &#123;</span><br><span class="line">                fn.call(target, e)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            fn(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  ● 事件冒泡流程：DOM树形结构、时间冒泡、阻止冒泡、冒泡应用<br>  ● 事件代理：代码简洁、渲染压力小<br>5、Ajax<br>  ● 手动编写ajax请求，不依赖第三方库<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest()</span><br><span class="line">xhr.open(&quot;GET&quot;, &quot;/api&quot;, false)</span><br><span class="line">xhr.onreadystatechange = function() &#123;</span><br><span class="line">    if(xhr.readyState == 4) &#123;</span><br><span class="line">        if(xhr.status == 200) &#123;</span><br><span class="line">            alert(xhr.responseText)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send(null)</span><br></pre></td></tr></table></figure></p><p>  ● XMLHttpRequest的状态码说明<br>readyState：0 - （未初始化）还没调用send()方法 ； 1 - （载入）已调用send()方法，正在发送请求；3 - （载入完成）send()方法执行完成，已经接收到全部响应内容；4 - （交互）正在解析响应内容；5 - （完成）响应内容解析完成，可以在客户端调用了。<br>status：2xx - 表示成功处理请求； 3xx - 需要重定向，浏览器直接跳转； 4xx - 客户端请求错误； 5xx - 服务器端错误<br>  ● 跨域概念：1、浏览器有同源策略，不允许Ajax访问其他域接口。2、协议、域名、端口，有一个不同就算跨域。<br>  ● 可以跨域的三个标签：<code>&lt;img src=xxx&gt;</code> 、<code>&lt;link herf=xxx&gt;</code>、<code>&lt;script src=xxx&gt;</code><br>  ● 跨域的几种实现方式：JSONP、服务器端设置http header<br>6、存储<br>  ● cookie概念：1、本身用于客户端和服务器端通信，但它有本地存储的功能，所以被借用，2、使用document.cookie = … 获取和修改，<br>  ● cookie特点：1、存储量小，只有4kb，2、所有http请求都会携带cookie，会影响获取资源的效率。3、需要封装才能使用<br>  ● <code>localStorage</code>和<code>sessionStorage</code>：HTML5专门为存储而设计，最大容量为5M，API简单易用，<code>localStorage.setItem(key, value)</code>  ， <code>localStorage.getItem(key)</code><br>  ● IOS safari 隐藏模式下 <code>localStorage.getItem</code>会报错，建议使用<code>try-catch</code>封装<br>三、开发环境<br>  ● AMD：require.js、全局define函数、全局require函数、依赖的js自动异步加载<br>  ● CommonJS：nodejs模块化规范，现在被大量使用，原因：1、前端开发依赖的插件和库都可以从npm中获取，2、构建工具的高度自动化，使得使用npm的成本非常低，3、CommonJS不会异步加载js，而是同步一次性加载出来<br>  ● AMD和CommonJS的应用场景：需要异步加载js使用AMD，使用了npm之后使用CommonJS<br>  ● 上线流程：1、将测试完成的代码体骄傲到git版本库的master分支，2、将当前服务器的代码全部打包并记录版本号，备份，3、将master分支的代码提交覆盖到线上服务器，生成新版本号。<br>  ● 回滚流程：1、将当前服务器的代码打包并记录版本号，备份，2、将备份的上一个版本号解压，覆盖到线上服务器，并生成新的版本号<br>四、运行环境<br>  ● 加载资源的形式：1、输入url（或跳转页面）加载html，2、加载html中的静态资源<br>  ● 加载资源的过程：1、浏览器根据DNS服务器得到域名的IP地址，2、像这个IP的机器发送http请求，3、服务器收到、处理并返回http请求，4、浏览器得到返回内容<br>  ● 浏览器渲染页面的过程：1、根据HTML结构生成DOM Tree，2、根据CSS生成CSSOM，3、将DOM和CSSOM整合形成RenderTree，4、根据RenderTree开始渲染和展开，5、遇到<code>&lt;script&gt;</code>时会执行并阻塞渲染。<br>  ● <code>window.onload</code>和<code>DOMContentLoaded</code>的区别：前者只全部资源加载完（包括图片、视频等异步资源）才会执行，后者是是DOM渲染完（图片、视频可能还没加载完）就执行<br>  ● 性能优化原则：1、多使用内存、缓存，2、减少CPU计算、减少网络请求<br>  ● 性能优化方法：1、加载资源优化（a、静态资源压缩合并，b、静态资源缓存，c、使用CDN让资源加载更快，d、使用SSR后端渲染，让数据直接输出到HTML中）；2、渲染优化（a、CSS放前面、JS放后面，b、懒加载，c、缓存查询，即减少DOM查询，对DOM查询做缓存，d、合并插入，即减少DOM操作，多个操作尽量放一起执行，e、事件节流，d、尽早执行操作，如DOMContentLoaded）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前言：JavaScript知识笔记细碎，对于初学者来说，学完基本语法就不知道该怎么深入学习了。这篇博客只针对初学JavaScript的同学学完基本语法后的“进一步”深入学习。当然，这不是JavaScript的全部，在末尾我会给出“再进一步”的学习方向。&lt;/p&gt;
&lt;p&gt;一、J
      
    
    </summary>
    
      <category term="技术篇" scheme="http://fblog.top/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
      <category term="Web前端" scheme="http://fblog.top/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://fblog.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之入门探索</title>
    <link href="http://fblog.top/2017/11/30/JavaScript%E4%B9%8B%E5%85%A5%E9%97%A8%E6%8E%A2%E7%B4%A2/"/>
    <id>http://fblog.top/2017/11/30/JavaScript之入门探索/</id>
    <published>2017-11-30T07:29:12.000Z</published>
    <updated>2017-12-04T07:32:42.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="技术篇" scheme="http://fblog.top/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
      <category term="Web前端" scheme="http://fblog.top/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://fblog.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>致即将加入爱阅读的学弟学妹</title>
    <link href="http://fblog.top/2017/07/18/%E8%87%B4%E5%8D%B3%E5%B0%86%E5%8A%A0%E5%85%A5%E7%88%B1%E9%98%85%E8%AF%BB%E7%9A%84%E5%AD%A6%E5%BC%9F%E5%AD%A6%E5%A6%B9/"/>
    <id>http://fblog.top/2017/07/18/致即将加入爱阅读的学弟学妹/</id>
    <published>2017-07-17T16:54:59.000Z</published>
    <updated>2017-12-31T16:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>人生的形式莫过于两种——平庸复制、追求自我。有的人总喜欢听别人的话走别人的路，往往活成了别人，有的人往往独立思考遵从本心，最终活出了自我。</p><p>我前二十年只读过《三字经》和《弟子规》，于是总会给自己一种“凡是人，皆需爱，天同覆，地同载”的博爱情怀，然而时间证明——我聪明却没有智慧，爱人却变得庸碌。这种困境违背了我博爱天下的情怀，让自己感到了极度的讽刺。</p><p>我在余秋雨先生的一句名言中得到了指点，“阅读的最大理由是想摆脱平庸，早一天就多一份人生的精彩；迟一天就多一天平庸的困扰”，这种迫切想改变现状脱离平庸的我刚刚好地遇见了爱阅读，遇见了梦之队，遇见了张老师。一个完美的开始读书的理由，一个互相监督永不缺勤的小组，一位时刻鼓励以身作则的良师益友，我们约定“终身学习”！</p><p>作为90后的我们本应该有周总理那样“为中华之崛起而读书”的爱国情怀，为祖国发展奉献毕生的力量。即便是没有，也应该有“为自己之崛起而读书”的信念，永远脱离平庸，让自己变得明智和自我。</p><p>如果你问我读书不是在接受别人的思想在走别人的路吗？我用阅读心理学理论的创立者鲁巴金的话回答你，“读书是在别人思想的帮助下，建立起自己的思想”，当你书读足够多的时候，你就有了自己的思维体系，你就是你，你就拥有了不再平庸的真真正正的“自我”！</p><p>冯忠森<br>2017年7月16日</p><p><a href="http://mp.weixin.qq.com/s/3jV1_QVBxxBqfQZkLbyilQ" target="_blank" rel="noopener">阅读原文</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人生的形式莫过于两种——平庸复制、追求自我。有的人总喜欢听别人的话走别人的路，往往活成了别人，有的人往往独立思考遵从本心，最终活出了自我。&lt;/p&gt;
&lt;p&gt;我前二十年只读过《三字经》和《弟子规》，于是总会给自己一种“凡是人，皆需爱，天同覆，地同载”的博爱情怀，然而时间证明——
      
    
    </summary>
    
      <category term="文学篇" scheme="http://fblog.top/categories/%E6%96%87%E5%AD%A6%E7%AF%87/"/>
    
    
      <category term="随笔" scheme="http://fblog.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Git学习指南</title>
    <link href="http://fblog.top/2017/07/06/Git%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/"/>
    <id>http://fblog.top/2017/07/06/Git学习指南/</id>
    <published>2017-07-06T13:31:04.000Z</published>
    <updated>2017-12-31T16:55:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>本技术路线并不针对所有人，只是我在技术生涯中，根据我个人的发展路线总结出来的一个套路，下面将按照学习的先后次序依次列举。仅供参考！</p><h2 id="一、Git-学习"><a href="#一、Git-学习" class="headerlink" title="一、Git 学习"></a>一、Git 学习</h2><h3 id="理由："><a href="#理由：" class="headerlink" title="理由："></a>理由：</h3><p>1、git 是每一个“技术人”必备的基本技能之一，也是每个程序员管理自己代码的最优秀的工具。<br>2、git 能让编程新手第一时间接触命令行，更早的养成技术习惯。<br>3、git 学习很简单。</p><h3 id="资料："><a href="#资料：" class="headerlink" title="资料："></a>资料：</h3><p>1、廖雪峰博客：<a href="http://www.liaoxuefeng.com/" target="_blank" rel="noopener">http://www.liaoxuefeng.com/</a><br>2、《Pro Git》：<a href="http://iissnan.com/progit/" target="_blank" rel="noopener">http://iissnan.com/progit/</a></p><h3 id="学习过程："><a href="#学习过程：" class="headerlink" title="学习过程："></a>学习过程：</h3><p>1、登录 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 官网注册一个GitHub账号，用来学习和今后使用。<br>2、下载 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a> 并安装。<br>3、紧跟 <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰博客</a> 教程指导。</p><h3 id="寄语："><a href="#寄语：" class="headerlink" title="寄语："></a>寄语：</h3><p>一手 Git，全盘 Get！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;本技术路线并不针对所有人，只是我在技术生涯中，根据我个人的发展路线总结出来的一个套路，下面将按照学习的先后次序依次列举。仅供参考！&lt;/p&gt;

      
    
    </summary>
    
      <category term="技术篇" scheme="http://fblog.top/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
      <category term="Git" scheme="http://fblog.top/tags/Git/"/>
    
  </entry>
  
</feed>
