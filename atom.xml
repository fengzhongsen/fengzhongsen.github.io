<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老冯博客</title>
  
  <subtitle>老冯的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fblog.top/"/>
  <updated>2019-06-16T03:41:04.568Z</updated>
  <id>http://fblog.top/</id>
  
  <author>
    <name>Sunny</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初识SVG</title>
    <link href="http://fblog.top/2019/06/16/%E5%88%9D%E8%AF%86SVG/"/>
    <id>http://fblog.top/2019/06/16/初识SVG/</id>
    <published>2019-06-16T03:25:54.000Z</published>
    <updated>2019-06-16T03:41:04.568Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><blockquote><p>SVG 是一种基于 XML 语法的图像格式，全称是可缩放矢量图（Scalable Vector Graphics）。其他图像格式都是基于像素处理的，SVG 则是属于对图像的形状描述，所以它本质上是文本文件，体积较小，且不管放大多少倍都不会失真。</p></blockquote><ol><li>SVG 文件可以直接插入网页，成为 DOM 的一部分，然后用 JavaScript 和 CSS 进行操作。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">id</span>=<span class="string">"mysvg"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 800 600"</span> <span class="attr">preserveAspectRatio</span>=<span class="string">"xMidYMid meet"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">circle</span> <span class="attr">id</span>=<span class="string">"mycircle"</span> <span class="attr">cx</span>=<span class="string">"400"</span> <span class="attr">cy</span>=<span class="string">"300"</span> <span class="attr">r</span>=<span class="string">"50"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>SVG 代码也可以写在一个独立文件中，然后用<code>&lt;img&gt;</code>、<code>&lt;object&gt;</code>、<code>&lt;embed&gt;</code>、<code>&lt;iframe&gt;</code>等标签插入网页。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"circle.svg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">id</span>=<span class="string">"object"</span> <span class="attr">data</span>=<span class="string">"circle.svg"</span> <span class="attr">type</span>=<span class="string">"image/svg+xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">id</span>=<span class="string">"embed"</span> <span class="attr">src</span>=<span class="string">"icon.svg"</span> <span class="attr">type</span>=<span class="string">"image/svg+xml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"iframe"</span> <span class="attr">src</span>=<span class="string">"icon.svg"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>CSS 也可以使用 SVG 文件。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(icon.svg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>SVG 文件还可以转为 BASE64 编码，然后作为 Data URI 写入网页。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"data:image/svg+xml;base64,[data]"</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="二、语法"><a href="#二、语法" class="headerlink" title="二、语法"></a>二、语法</h1><h4 id="2-1-顶层标签"><a href="#2-1-顶层标签" class="headerlink" title="2.1 顶层标签"></a>2.1 顶层标签<svg/></h4><blockquote><p>SVG 代码都放在顶层标签<svg>之中。</svg></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100%"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">id</span>=<span class="string">"mycircle"</span> <span class="attr">cx</span>=<span class="string">"50"</span> <span class="attr">cy</span>=<span class="string">"50"</span> <span class="attr">r</span>=<span class="string">"50"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;svg&gt;</code>的<code>width</code>属性和<code>height</code>属性，指定了 SVG 图像在 HTML 元素中所占据的宽度和高度。除了相对单位，也可以采用绝对单位（单位：像素）。如果不指定这两个属性，SVG 图像默认大小是300像素（宽） x 150像素（高）。</p><p>如果只想展示 SVG 图像的一部分，就要指定viewBox属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">viewBox</span>=<span class="string">"50 50 50 50"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">id</span>=<span class="string">"mycircle"</span> <span class="attr">cx</span>=<span class="string">"50"</span> <span class="attr">cy</span>=<span class="string">"50"</span> <span class="attr">r</span>=<span class="string">"50"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;viewBox&gt;</code>属性的值有四个数字，分别是左上角的横坐标和纵坐标、视口的宽度和高度。上面代码中，SVG 图像是100像素宽 x 100像素高，<code>viewBox</code>属性指定视口从<code>(50, 50)</code>这个点开始。所以，实际看到的是右下角的四分之一圆。</p><p>注意，视口必须适配所在的空间。上面代码中，视口的大小是 50 x 50，由于 SVG 图像的大小是 100 x 100，所以视口会放大去适配 SVG 图像的大小，即放大了四倍。</p><p>如果不指定<code>width</code>属性和<code>height</code>属性，只指定<code>viewBox</code>属性，则相当于只给定 SVG 图像的长宽比。这时，SVG 图像的默认大小将等于所在的 HTML 元素的大小。</p><h4 id="2-2-圆形标签"><a href="#2-2-圆形标签" class="headerlink" title="2.2 圆形标签 "></a>2.2 圆形标签 <circle></circle></h4><blockquote><p><code>&lt;circle&gt;</code>标签代表圆形。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"180"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"30"</span>  <span class="attr">cy</span>=<span class="string">"50"</span> <span class="attr">r</span>=<span class="string">"25"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"90"</span>  <span class="attr">cy</span>=<span class="string">"50"</span> <span class="attr">r</span>=<span class="string">"25"</span> <span class="attr">class</span>=<span class="string">"red"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"150"</span> <span class="attr">cy</span>=<span class="string">"50"</span> <span class="attr">r</span>=<span class="string">"25"</span> <span class="attr">class</span>=<span class="string">"fancy"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码定义了三个圆。<code>&lt;circle&gt;</code>标签的<code>cx</code>、<code>cy</code>、<code>r</code>属性分别为横坐标、纵坐标和半径，单位为像素。坐标都是相对于<code>&lt;svg&gt;</code>画布的左上角原点。</p><p><code>class</code>属性用来指定对应的 CSS 类。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">  <span class="attribute">fill</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fancy</span> &#123;</span><br><span class="line">  <span class="attribute">fill</span>: none;</span><br><span class="line">  <span class="attribute">stroke</span>: black;</span><br><span class="line">  <span class="attribute">stroke-width</span>: <span class="number">3pt</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SVG 的 CSS 属性与网页元素有所不同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fill：填充色</span><br><span class="line">stroke：描边色</span><br><span class="line">stroke-width：边框宽度</span><br></pre></td></tr></table></figure><h4 id="2-3-直线标签"><a href="#2-3-直线标签" class="headerlink" title="2.3 直线标签"></a>2.3 直线标签<line></line></h4><blockquote><p><code>&lt;line&gt;</code>标签用来绘制直线。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"180"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">"0"</span> <span class="attr">y1</span>=<span class="string">"0"</span> <span class="attr">x2</span>=<span class="string">"200"</span> <span class="attr">y2</span>=<span class="string">"0"</span> <span class="attr">style</span>=<span class="string">"stroke:rgb(0,0,0);stroke-width:5"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>&lt;line&gt;</code>标签的<code>x1</code>属性和<code>y1</code>属性，表示线段起点的横坐标和纵坐标；<code>x2</code>属性和<code>y2</code>属性，表示线段终点的横坐标和纵坐标；<code>style</code>属性表示线段的样式。</p><h4 id="2-4-折线标签"><a href="#2-4-折线标签" class="headerlink" title="2.4 折线标签"></a>2.4 折线标签<polyline></polyline></h4><blockquote><p><polyline>标签用于绘制一根折线。</polyline></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"180"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">"3,3 30,28 3,53"</span> <span class="attr">fill</span>=<span class="string">"none"</span> <span class="attr">stroke</span>=<span class="string">"black"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;polyline&gt;</code>的<code>points</code>属性指定了每个端点的坐标，横坐标与纵坐标之间与逗号分隔，点与点之间用空格分隔。</p><h4 id="2-5-矩形标签"><a href="#2-5-矩形标签" class="headerlink" title="2.5 矩形标签"></a>2.5 矩形标签<rect></rect></h4><blockquote><p><rect>标签用于绘制矩形。</rect></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"180"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">style</span>=<span class="string">"stroke: #70d5dd; fill: #dd524b"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;rect&gt;</code>的<code>x</code>属性和<code>y</code>属性，指定了矩形左上角端点的横坐标和纵坐标；<code>width</code>属性和<code>height</code>属性指定了矩形的宽度和高度（单位像素）。</p><h4 id="2-6-椭圆标签"><a href="#2-6-椭圆标签" class="headerlink" title="2.6 椭圆标签"></a>2.6 椭圆标签<ellipse></ellipse></h4><blockquote><p><ellipse>标签用于绘制椭圆。</ellipse></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"180"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ellipse</span> <span class="attr">cx</span>=<span class="string">"60"</span> <span class="attr">cy</span>=<span class="string">"60"</span> <span class="attr">ry</span>=<span class="string">"40"</span> <span class="attr">rx</span>=<span class="string">"20"</span> <span class="attr">stroke</span>=<span class="string">"black"</span> <span class="attr">stroke-width</span>=<span class="string">"5"</span> <span class="attr">fill</span>=<span class="string">"silver"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;ellipse&gt;</code>的<code>cx</code>属性和<code>cy</code>属性，指定了椭圆中心的横坐标和纵坐标（单位像素）；<code>rx</code>属性和<code>ry</code>属性，指定了椭圆横向轴和纵向轴的半径（单位像素）。</p><h4 id="2-7-多边形标签"><a href="#2-7-多边形标签" class="headerlink" title="2.7 多边形标签"></a>2.7 多边形标签<polygon></polygon></h4><blockquote><p><polygon>标签用于绘制多边形。</polygon></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"180"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">polygon</span> <span class="attr">fill</span>=<span class="string">"green"</span> <span class="attr">stroke</span>=<span class="string">"orange"</span> <span class="attr">stroke-width</span>=<span class="string">"1"</span> <span class="attr">points</span>=<span class="string">"0,0 100,0 100,100 0,100 0,0"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;polygon&gt;</code>的<code>points</code>属性指定了每个端点的坐标，横坐标与纵坐标之间与逗号分隔，点与点之间用空格分隔。</p><h4 id="2-8-路径标签"><a href="#2-8-路径标签" class="headerlink" title="2.8 路径标签"></a>2.8 路径标签<path></path></h4><blockquote><p><path>标签用于制路径，<code>d</code>属性表示绘制顺序，它的值是一个长字符串。</path></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 下面这两条路径重合，或者说一条路径的两种表示方法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M10 10 H 90 V 90 H 10 Z"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span> <span class="attr">stroke</span>=<span class="string">"black"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M10 10 h 80 v 80 h -80 Z"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span> <span class="attr">stroke</span>=<span class="string">"black"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;path&gt;</code>元素里有5个画直线的命令（M、L、H、V、Z），顾名思义，直线命令就是在两个点之间画直线。绘制平滑曲线的命令有三个，其中两个用来绘制贝塞尔曲线（C、Q，C 和 Q 分别有其简易命令 S 和 T ），另外一个用来绘制弧形或者说是圆的一部分（A）。每一个命令都有两种表示方式，一种是用<strong><em>大写字母</em></strong>，表示采用绝对定位。另一种是用<strong><em>小写字母</em></strong>，表示采用相对定位（例如：从上一个点开始，向上移动10px，向左移动7px）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 1、直线命令</span><br><span class="line">M = moveto // M x y (or m dx dy)</span><br><span class="line">L = lineto // L x y (or l dx dy)</span><br><span class="line">H = horizontal lineto // H x (or h dx)</span><br><span class="line">V = vertical lineto // V y (or v dy)</span><br><span class="line">Z = closepath // Z (or z) 不区分大小写</span><br><span class="line"></span><br><span class="line">// 2、曲线命令</span><br><span class="line">// 2.1 三次贝塞尔曲线</span><br><span class="line">C = curveto // C x1 y1, x2 y2, x y (or c dx1 dy1, dx2 dy2, dx dy)</span><br><span class="line">S = smooth curveto // S x2 y2, x y (or s dx2 dy2, dx dy)</span><br><span class="line">// 2.2 二次贝塞尔曲线</span><br><span class="line">Q = quadratic Bézier curve // Q x1 y1, x y (or q dx1 dy1, dx dy)</span><br><span class="line">T = smooth quadratic Bézier curveto // T x y (or t dx dy)</span><br><span class="line">// 2.3 弧形曲线</span><br><span class="line">A = elliptical Arc // A rx ry x-axis-rotation large-arc-flag sweep-flag x y (OR a rx ry x-axis-rotation large-arc-flag sweep-flag dx dy)</span><br></pre></td></tr></table></figure><p>详情参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Paths" target="_blank" rel="noopener">路径-SVG | MDN</a></p><p>拓展阅读 <a href="https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A" target="_blank" rel="noopener">维基百科</a>、<a href="https://www.jianshu.com/p/0c9b4b681724" target="_blank" rel="noopener">简书博客</a></p><h4 id="2-9-文本标签"><a href="#2-9-文本标签" class="headerlink" title="2.9 文本标签"></a>2.9 文本标签<text></text></h4><blockquote><p><text>标签用于绘制文本。</text></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"180"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"50"</span> <span class="attr">y</span>=<span class="string">"25"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;text&gt;</code>的<code>x</code>属性和<code>y</code>属性，表示文本区块基线（baseline）起点的横坐标和纵坐标。文字的样式可以用<code>class</code>或<code>style</code>属性指定。</p><h4 id="2-10-图片标签"><a href="#2-10-图片标签" class="headerlink" title="2.10 图片标签"></a>2.10 图片标签<image></image></h4><blockquote><p><image>标签用于插入图片文件。</image></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">"0 0 100 100"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">image</span> <span class="attr">xlink:href</span>=<span class="string">"path/to/image.jpg"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">"50%"</span> <span class="attr">height</span>=<span class="string">"50%"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>&lt;image&gt;</code>的<code>xlink:href</code>属性表示图像的来源。</p><h4 id="2-11-复制标签"><a href="#2-11-复制标签" class="headerlink" title="2.11 复制标签"></a>2.11 复制标签<use></use></h4><blockquote><p><use>标签用于复制一个形状。</use></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">"0 0 30 10"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">id</span>=<span class="string">"myCircle"</span> <span class="attr">cx</span>=<span class="string">"5"</span> <span class="attr">cy</span>=<span class="string">"5"</span> <span class="attr">r</span>=<span class="string">"4"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">use</span> <span class="attr">href</span>=<span class="string">"#myCircle"</span> <span class="attr">x</span>=<span class="string">"10"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">fill</span>=<span class="string">"blue"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">use</span> <span class="attr">href</span>=<span class="string">"#myCircle"</span> <span class="attr">x</span>=<span class="string">"20"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">fill</span>=<span class="string">"white"</span> <span class="attr">stroke</span>=<span class="string">"blue"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;use&gt;</code>的<code>href</code>属性指定所要复制的节点，<code>x</code>属性和<code>y</code>属性是<code>&lt;use&gt;</code>左上角的坐标。另外，还可以指定<code>width</code>和<code>height</code>坐标。</p><h4 id="2-12-分组标签"><a href="#2-12-分组标签" class="headerlink" title="2.12 分组标签"></a>2.12 分组标签<g></g></h4><blockquote><p><g>标签用于将多个形状组成一个组（group），方便复用。</g></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">"myCircle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"25"</span> <span class="attr">y</span>=<span class="string">"20"</span>&gt;</span>圆形<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"50"</span> <span class="attr">cy</span>=<span class="string">"50"</span> <span class="attr">r</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">use</span> <span class="attr">href</span>=<span class="string">"#myCircle"</span> <span class="attr">x</span>=<span class="string">"100"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">fill</span>=<span class="string">"blue"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">use</span> <span class="attr">href</span>=<span class="string">"#myCircle"</span> <span class="attr">x</span>=<span class="string">"200"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">fill</span>=<span class="string">"white"</span> <span class="attr">stroke</span>=<span class="string">"blue"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-13-仅供引用标签"><a href="#2-13-仅供引用标签" class="headerlink" title="2.13 仅供引用标签"></a>2.13 仅供引用标签<defs></defs></h4><blockquote><p><defs>标签用于自定义形状，它内部的代码不会显示，仅供引用。</defs></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">"myCircle"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"25"</span> <span class="attr">y</span>=<span class="string">"20"</span>&gt;</span>圆形<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"50"</span> <span class="attr">cy</span>=<span class="string">"50"</span> <span class="attr">r</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">use</span> <span class="attr">href</span>=<span class="string">"#myCircle"</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">use</span> <span class="attr">href</span>=<span class="string">"#myCircle"</span> <span class="attr">x</span>=<span class="string">"100"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">fill</span>=<span class="string">"blue"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">use</span> <span class="attr">href</span>=<span class="string">"#myCircle"</span> <span class="attr">x</span>=<span class="string">"200"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">fill</span>=<span class="string">"white"</span> <span class="attr">stroke</span>=<span class="string">"blue"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-14-自定义形状标签"><a href="#2-14-自定义形状标签" class="headerlink" title="2.14 自定义形状标签"></a>2.14 自定义形状标签<pattern></pattern></h4><blockquote><p><pattern>标签用于自定义一个形状，该形状可以被引用来平铺一个区域。</pattern></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"500"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pattern</span> <span class="attr">id</span>=<span class="string">"dots"</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">patternUnits</span>=<span class="string">"userSpaceOnUse"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">fill</span>=<span class="string">"#bee9e8"</span> <span class="attr">cx</span>=<span class="string">"50"</span> <span class="attr">cy</span>=<span class="string">"50"</span> <span class="attr">r</span>=<span class="string">"35"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100%"</span> <span class="attr">fill</span>=<span class="string">"url(#dots)"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>&lt;pattern&gt;</code>标签将一个圆形定义为<code>dots</code>模式。<code>patternUnits=&quot;userSpaceOnUse&quot;</code>表示<code>&lt;pattern&gt;</code>的宽度和长度是实际的像素值。然后，指定这个模式去填充下面的矩形。</p><h4 id="2-15-动效标签"><a href="#2-15-动效标签" class="headerlink" title="2.15 动效标签"></a>2.15 动效标签<animate></animate></h4><blockquote><p><animate>标签用于产生动画效果。</animate></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"500px"</span> <span class="attr">height</span>=<span class="string">"500px"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">fill</span>=<span class="string">"#feac5e"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">animate</span> <span class="attr">attributeName</span>=<span class="string">"x"</span> <span class="attr">from</span>=<span class="string">"0"</span> <span class="attr">to</span>=<span class="string">"500"</span> <span class="attr">dur</span>=<span class="string">"2s"</span> <span class="attr">repeatCount</span>=<span class="string">"indefinite"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码中，矩形会不断移动，产生动画效果。</p><p><animate>的属性含义如下。</animate></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">attributeName：发生动画效果的属性名。</span><br><span class="line">from：单次动画的初始值。</span><br><span class="line">to：单次动画的结束值。</span><br><span class="line">dur：单次动画的持续时间。</span><br><span class="line">repeatCount：动画的循环模式。</span><br></pre></td></tr></table></figure><p>可以在多个属性上面定义动画。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">animate</span> <span class="attr">attributeName</span>=<span class="string">"x"</span> <span class="attr">from</span>=<span class="string">"0"</span> <span class="attr">to</span>=<span class="string">"500"</span> <span class="attr">dur</span>=<span class="string">"2s"</span> <span class="attr">repeatCount</span>=<span class="string">"indefinite"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">animate</span> <span class="attr">attributeName</span>=<span class="string">"width"</span> <span class="attr">to</span>=<span class="string">"500"</span> <span class="attr">dur</span>=<span class="string">"2s"</span> <span class="attr">repeatCount</span>=<span class="string">"indefinite"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-16-变形标签"><a href="#2-16-变形标签" class="headerlink" title="2.16 变形标签"></a>2.16 变形标签<animatetransform></animatetransform></h4><blockquote><p><animate>标签对 CSS 的transform属性不起作用，如果需要变形，就要使用<animatetransform>标签。</animatetransform></animate></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"500px"</span> <span class="attr">height</span>=<span class="string">"500px"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"250"</span> <span class="attr">y</span>=<span class="string">"250"</span> <span class="attr">width</span>=<span class="string">"50"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">fill</span>=<span class="string">"#4bc0c8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">animateTransform</span> <span class="attr">attributeName</span>=<span class="string">"transform"</span> <span class="attr">type</span>=<span class="string">"rotate"</span> <span class="attr">begin</span>=<span class="string">"0s"</span> <span class="attr">dur</span>=<span class="string">"10s"</span> <span class="attr">from</span>=<span class="string">"0 200 200"</span> <span class="attr">to</span>=<span class="string">"360 400 400"</span> <span class="attr">repeatCount</span>=<span class="string">"indefinite"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>&lt;animateTransform&gt;</code>的效果为旋转（<code>rotate</code>），这时<code>from</code>和<code>to</code>属性值有三个数字，第一个数字是角度值，第二个值和第三个值是旋转中心的坐标。<code>from=&quot;0 200 200&quot;</code>表示开始时，角度为0，围绕<code>(200, 200)</code>开始旋转；<code>to=&quot;360 400 400&quot;</code>表示结束时，角度为360，围绕<code>(400, 400)</code>旋转。</p><h1 id="三、JavaScript-操作"><a href="#三、JavaScript-操作" class="headerlink" title="三、JavaScript 操作"></a>三、JavaScript 操作</h1><h4 id="3-1-DOM-操作"><a href="#3-1-DOM-操作" class="headerlink" title="3.1 DOM 操作"></a>3.1 DOM 操作</h4><blockquote><p>如果 SVG 代码直接写在 HTML 网页之中，它就成为网页 DOM 的一部分，可以直接用 DOM 操作。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        circle &#123;</span></span><br><span class="line"><span class="undefined">            stroke-width: 5;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">stroke</span>: <span class="selector-id">#f00</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">fill</span>: <span class="selector-id">#ff0</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">circle</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">stroke</span>: <span class="selector-id">#090</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">fill</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">id</span>=<span class="string">"mysvg"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 800 600"</span> <span class="attr">preserveAspectRatio</span>=<span class="string">"xMidYMid meet"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">circle</span> <span class="attr">id</span>=<span class="string">"mycircle"</span> <span class="attr">cx</span>=<span class="string">"400"</span> <span class="attr">cy</span>=<span class="string">"300"</span> <span class="attr">r</span>=<span class="string">"50"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        // 点击图形，就改写circle元素的r属性。</span></span><br><span class="line"><span class="undefined">        var mycircle = document.getElementById('mycircle');</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        mycircle.addEventListener('click', function (e) &#123;</span></span><br><span class="line"><span class="undefined">            console.log('circle clicked - enlarging');</span></span><br><span class="line"><span class="undefined">            mycircle.setAttribute('r', 60);</span></span><br><span class="line"><span class="undefined">        &#125;, false);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-获取-SVG-DOM"><a href="#3-2-获取-SVG-DOM" class="headerlink" title="3.2 获取 SVG DOM"></a>3.2 获取 SVG DOM</h4><blockquote><p>使用<code>&lt;object&gt;</code>、<code>&lt;iframe&gt;</code>、<code>&lt;embed&gt;</code>标签插入 SVG 文件，可以获取 SVG DOM。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> svgObject = <span class="built_in">document</span>.getElementById(<span class="string">'object'</span>).contentDocument;</span><br><span class="line"><span class="keyword">var</span> svgIframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>).contentDocument;</span><br><span class="line"><span class="keyword">var</span> svgEmbed = <span class="built_in">document</span>.getElementById(<span class="string">'embed'</span>).getSVGDocument();</span><br></pre></td></tr></table></figure><p>注意，如果使用<code>&lt;img&gt;</code>标签插入 SVG 文件，就无法获取 SVG DOM。</p><h4 id="3-3-读取-SVG-源码"><a href="#3-3-读取-SVG-源码" class="headerlink" title="3.3 读取 SVG 源码"></a>3.3 读取 SVG 源码</h4><blockquote><p>由于 SVG 文件就是一段 XML 文本，因此可以通过读取 XML 代码的方式，读取 SVG 源码。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用`XMLSerializer`实例的`serializeToString()`方法，获取 SVG 元素的代码。</span></span><br><span class="line"><span class="keyword">var</span> svgString = <span class="keyword">new</span> XMLSerializer()</span><br><span class="line">  .serializeToString(<span class="built_in">document</span>.querySelector(<span class="string">'svg'</span>));</span><br></pre></td></tr></table></figure><h4 id="3-4-SVG-图像转为-Canvas-图像"><a href="#3-4-SVG-图像转为-Canvas-图像" class="headerlink" title="3.4 SVG 图像转为 Canvas 图像"></a>3.4 SVG 图像转为 Canvas 图像</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先，需要新建一个Image对象，将 SVG 图像指定到该Image对象的src属性。</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line"><span class="keyword">var</span> svg = <span class="keyword">new</span> Blob([svgString], &#123;<span class="attr">type</span>: <span class="string">"image/svg+xml;charset=utf-8"</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DOMURL = self.URL || self.webkitURL || self;</span><br><span class="line"><span class="keyword">var</span> url = DOMURL.createObjectURL(svg);</span><br><span class="line"></span><br><span class="line">img.src = url;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后，当图像加载完成后，再将它绘制到&lt;canvas&gt;元素。</span></span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line">  <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">  ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;SVG 是一种基于 XML 语法的图像格式，全称是可缩放矢量图（Scalable Vector G
      
    
    </summary>
    
      <category term="技术篇" scheme="http://fblog.top/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
      <category term="前端" scheme="http://fblog.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="svg" scheme="http://fblog.top/tags/svg/"/>
    
  </entry>
  
  <entry>
    <title>Flex布局语法汇总</title>
    <link href="http://fblog.top/2018/03/16/Flex%E5%B8%83%E5%B1%80%E8%AF%AD%E6%B3%95%E6%B1%87%E6%80%BB/"/>
    <id>http://fblog.top/2018/03/16/Flex布局语法汇总/</id>
    <published>2018-03-16T14:59:31.000Z</published>
    <updated>2018-03-16T15:15:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言：Flex-布局分为多个版本，以下为最新版本语法汇总。"><a href="#前言：Flex-布局分为多个版本，以下为最新版本语法汇总。" class="headerlink" title="前言：Flex 布局分为多个版本，以下为最新版本语法汇总。"></a>前言：Flex 布局分为多个版本，以下为最新版本语法汇总。</h3><blockquote><p>其中注释所示皆假设主轴为水平方向，且从左到右。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">/* Flex 布局 属性 总结 */</span><br><span class="line">.box &#123;</span><br><span class="line">    display: flex;                    /* 弹性布局 */</span><br><span class="line">    display: inline-flex;             /* 行内元素 */</span><br><span class="line">    display: -webkit-flex;            /* [Safari] */</span><br><span class="line"></span><br><span class="line">    /* 属性决定主轴的方向（即项目的排列方向）。 */</span><br><span class="line">    flex-direction: row;              /* [默认值] 主轴为水平方向，起点在左端。 */</span><br><span class="line">    flex-direction: row-reverse;      /* 主轴为水平方向，起点在右端。 */</span><br><span class="line">    flex-direction: column;           /* 主轴为垂直方向，起点在上沿。 */</span><br><span class="line">    flex-direction: column-reverse;   /* 主轴为垂直方向，起点在下沿。 */</span><br><span class="line"></span><br><span class="line">    /* 定义如果一条轴线排不下，如何换行。 */</span><br><span class="line">    flex-wrap: nowrap;                /* [默认值] 不换行。 */</span><br><span class="line">    flex-wrap: wrap;                  /* 换行，第一行在上方。 */</span><br><span class="line">    flex-wrap: wrap-reverse;          /* 换行，第一行在下方。 */</span><br><span class="line"></span><br><span class="line">    /* 定义项目在主轴上如何对齐。 */</span><br><span class="line">    justify-content: flex-start;      /* [默认值] 左对齐 */</span><br><span class="line">    justify-content: flex-end;        /* 右对齐 */</span><br><span class="line">    justify-content: center;          /* 居中 */</span><br><span class="line">    justify-content: space-between;   /* 两端对齐，项目之间的间隔都相等。 */</span><br><span class="line">    justify-content: space-around;    /* 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。 */</span><br><span class="line"></span><br><span class="line">    /* 定义项目在交叉轴上如何对齐。 */</span><br><span class="line">    align-items: stretch;             /* [默认值] 如果项目未设置高度或设为auto，将占满整个容器的高度。 */</span><br><span class="line">    align-items: flex-start;          /* 交叉轴的起点对齐。 */</span><br><span class="line">    align-items: flex-end;            /* 交叉轴的终点对齐。 */</span><br><span class="line">    align-items: center;              /* 交叉轴的中点对齐。 */</span><br><span class="line">    align-items: baseline;            /* 项目的第一行文字的基线对齐。 */</span><br><span class="line"></span><br><span class="line">    /* 多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。 */</span><br><span class="line">    align-content: flex-start;        /* 与交叉轴的起点对齐。 */</span><br><span class="line">    align-content: flex-end;          /* 与交叉轴的终点对齐。 */</span><br><span class="line">    align-content: center;            /* 与交叉轴的中点对齐。 */</span><br><span class="line">    align-content: space-between;     /* 与交叉轴两端对齐，轴线之间的间隔平均分布。 */</span><br><span class="line">    align-content: space-around;      /* 每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item &#123;</span><br><span class="line">    order: 0;                          /* [默认值 0] 定义项目的排列顺序。数值越小，排列越靠前，默认为0。 */</span><br><span class="line"></span><br><span class="line">    flex-grow: 0;                      /* [默认值 0] 定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。 */</span><br><span class="line">    flex-shrink: 1;                    /* [默认值 1] 定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。 */</span><br><span class="line">    flex-basis: auto;                  /* [默认值 auto] 定义了在分配多余空间之前，项目占据的主轴空间（main size） */</span><br><span class="line"></span><br><span class="line">    flex: 0 1 auto;                    /* flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。 */</span><br><span class="line"></span><br><span class="line">    /* 允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。 */</span><br><span class="line">    align-self: auto;                  /* [默认值] 表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。 */</span><br><span class="line">    align-self: flex-start;            /* 与 align-items 一致 */</span><br><span class="line">    align-self: flex-end;              /* 与 align-items 一致 */</span><br><span class="line">    align-self: center;                /* 与 align-items 一致 */</span><br><span class="line">    align-self: baseline;              /* 与 align-items 一致 */</span><br><span class="line">    align-self: stretch;               /* 与 align-items 一致 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言：Flex-布局分为多个版本，以下为最新版本语法汇总。&quot;&gt;&lt;a href=&quot;#前言：Flex-布局分为多个版本，以下为最新版本语法汇总。&quot; class=&quot;headerlink&quot; title=&quot;前言：Flex 布局分为多个版本，以下为最新版本语法汇总。&quot;&gt;&lt;/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript之初级进阶</title>
    <link href="http://fblog.top/2017/12/04/JavaScript%E4%B9%8B%E5%88%9D%E7%BA%A7%E8%BF%9B%E9%98%B6/"/>
    <id>http://fblog.top/2017/12/04/JavaScript之初级进阶/</id>
    <published>2017-12-04T07:29:32.000Z</published>
    <updated>2017-12-04T08:32:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>前言：JavaScript知识笔记细碎，对于初学者来说，学完基本语法就不知道该怎么深入学习了。这篇博客只针对初学JavaScript的同学学完基本语法后的“进一步”深入学习。当然，这不是JavaScript的全部，在末尾我会给出“再进一步”的学习方向。</p><p>一、JavaScript基础<br>1、对变量提升的理解<br>变量定义和函数声明会被提升到当前作用域的顶部<br>2、this的应用场景<br>  ● 作为构造函数执行<br>  ● 作为对象属性执行<br>  ● 作为普通函数执行<br>  ● <code>call</code>、<code>apply</code>、<code>bind</code><br>3、如何理解作用域<br>  ● 自由变量<br>  ● 作用域链，及自由变量的查找<br>  ● 闭包的两个应用场景：参数作为返回值、函数作为参数传递<br>4、如何理解闭包<br>主要用于封装变量、收敛权限<br>5、同步和异步有什么区别<br>同步会阻塞代码执行，而异步不会。alert是同步，setTimeout是异步。<br>6、前端使用异步的场景<br>  ● 定时任务：setTimeout、setInterval<br>  ● 网络请求：ajax请求、动态<code>&lt;img&gt;</code>加载<br>  ● 事件绑定</p><p>二、Web-API<br>1、w3c标准中关于js的规定<br>  ● DOM操作<br>  ● BOM操作<br>  ● 事件绑定<br>  ● ajax请求（包括http协议）<br>  ● 存储<br>2、DOM（Document Object Model）<br>  ● 本质：为浏览器把HTML代码结构化成浏览器可识别并且js可操作的一个模型。<br>  ● 基本数据结构：树<br>  ● 常用API：1、获取DOM节点，以及节点的property和Attribute，2、获取父节点、获取子节点，3、新增节点、删除节点<br>  ● Attribute是HTML标签的属性，property是js对象的属性<br>3、BOM（Browser Object Model）<br>  ● navigator：检测浏览器类型 navigator.userAgent<br>  ● screen：screen.width  、screen.height<br>  ● location：herf、protocol（http:  、 https:）、host、pathname、search、hash<br>  ● history：history.back() 、 history.forward()<br>4、事件<br>  ● 通用的事件监听函数<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function bindEvent(elem, type, selector, fn) &#123;</span><br><span class="line">    if(fn == null) &#123;</span><br><span class="line">        fn = selector</span><br><span class="line">        selector = null</span><br><span class="line">    &#125;</span><br><span class="line">    elem.addEventListener(type, function(e) &#123;</span><br><span class="line">        var target</span><br><span class="line">        if(selector) &#123;</span><br><span class="line">            target = e.target</span><br><span class="line">            if(target.matches(selector)) &#123;</span><br><span class="line">                fn.call(target, e)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            fn(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  ● 事件冒泡流程：DOM树形结构、时间冒泡、阻止冒泡、冒泡应用<br>  ● 事件代理：代码简洁、渲染压力小<br>5、Ajax<br>  ● 手动编写ajax请求，不依赖第三方库<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest()</span><br><span class="line">xhr.open(&quot;GET&quot;, &quot;/api&quot;, false)</span><br><span class="line">xhr.onreadystatechange = function() &#123;</span><br><span class="line">    if(xhr.readyState == 4) &#123;</span><br><span class="line">        if(xhr.status == 200) &#123;</span><br><span class="line">            alert(xhr.responseText)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send(null)</span><br></pre></td></tr></table></figure></p><p>  ● XMLHttpRequest的状态码说明<br>readyState：0 - （未初始化）还没调用send()方法 ； 1 - （载入）已调用send()方法，正在发送请求；3 - （载入完成）send()方法执行完成，已经接收到全部响应内容；4 - （交互）正在解析响应内容；5 - （完成）响应内容解析完成，可以在客户端调用了。<br>status：2xx - 表示成功处理请求； 3xx - 需要重定向，浏览器直接跳转； 4xx - 客户端请求错误； 5xx - 服务器端错误<br>  ● 跨域概念：1、浏览器有同源策略，不允许Ajax访问其他域接口。2、协议、域名、端口，有一个不同就算跨域。<br>  ● 可以跨域的三个标签：<code>&lt;img src=xxx&gt;</code> 、<code>&lt;link herf=xxx&gt;</code>、<code>&lt;script src=xxx&gt;</code><br>  ● 跨域的几种实现方式：JSONP、服务器端设置http header<br>6、存储<br>  ● cookie概念：1、本身用于客户端和服务器端通信，但它有本地存储的功能，所以被借用，2、使用document.cookie = … 获取和修改，<br>  ● cookie特点：1、存储量小，只有4kb，2、所有http请求都会携带cookie，会影响获取资源的效率。3、需要封装才能使用<br>  ● <code>localStorage</code>和<code>sessionStorage</code>：HTML5专门为存储而设计，最大容量为5M，API简单易用，<code>localStorage.setItem(key, value)</code>  ， <code>localStorage.getItem(key)</code><br>  ● IOS safari 隐藏模式下 <code>localStorage.getItem</code>会报错，建议使用<code>try-catch</code>封装<br>三、开发环境<br>  ● AMD：require.js、全局define函数、全局require函数、依赖的js自动异步加载<br>  ● CommonJS：nodejs模块化规范，现在被大量使用，原因：1、前端开发依赖的插件和库都可以从npm中获取，2、构建工具的高度自动化，使得使用npm的成本非常低，3、CommonJS不会异步加载js，而是同步一次性加载出来<br>  ● AMD和CommonJS的应用场景：需要异步加载js使用AMD，使用了npm之后使用CommonJS<br>  ● 上线流程：1、将测试完成的代码体骄傲到git版本库的master分支，2、将当前服务器的代码全部打包并记录版本号，备份，3、将master分支的代码提交覆盖到线上服务器，生成新版本号。<br>  ● 回滚流程：1、将当前服务器的代码打包并记录版本号，备份，2、将备份的上一个版本号解压，覆盖到线上服务器，并生成新的版本号<br>四、运行环境<br>  ● 加载资源的形式：1、输入url（或跳转页面）加载html，2、加载html中的静态资源<br>  ● 加载资源的过程：1、浏览器根据DNS服务器得到域名的IP地址，2、像这个IP的机器发送http请求，3、服务器收到、处理并返回http请求，4、浏览器得到返回内容<br>  ● 浏览器渲染页面的过程：1、根据HTML结构生成DOM Tree，2、根据CSS生成CSSOM，3、将DOM和CSSOM整合形成RenderTree，4、根据RenderTree开始渲染和展开，5、遇到<code>&lt;script&gt;</code>时会执行并阻塞渲染。<br>  ● <code>window.onload</code>和<code>DOMContentLoaded</code>的区别：前者只全部资源加载完（包括图片、视频等异步资源）才会执行，后者是是DOM渲染完（图片、视频可能还没加载完）就执行<br>  ● 性能优化原则：1、多使用内存、缓存，2、减少CPU计算、减少网络请求<br>  ● 性能优化方法：1、加载资源优化（a、静态资源压缩合并，b、静态资源缓存，c、使用CDN让资源加载更快，d、使用SSR后端渲染，让数据直接输出到HTML中）；2、渲染优化（a、CSS放前面、JS放后面，b、懒加载，c、缓存查询，即减少DOM查询，对DOM查询做缓存，d、合并插入，即减少DOM操作，多个操作尽量放一起执行，e、事件节流，d、尽早执行操作，如DOMContentLoaded）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前言：JavaScript知识笔记细碎，对于初学者来说，学完基本语法就不知道该怎么深入学习了。这篇博客只针对初学JavaScript的同学学完基本语法后的“进一步”深入学习。当然，这不是JavaScript的全部，在末尾我会给出“再进一步”的学习方向。&lt;/p&gt;
&lt;p&gt;一、J
      
    
    </summary>
    
      <category term="技术篇" scheme="http://fblog.top/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
      <category term="Web前端" scheme="http://fblog.top/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://fblog.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之入门探索</title>
    <link href="http://fblog.top/2017/11/30/JavaScript%E4%B9%8B%E5%85%A5%E9%97%A8%E6%8E%A2%E7%B4%A2/"/>
    <id>http://fblog.top/2017/11/30/JavaScript之入门探索/</id>
    <published>2017-11-30T07:29:12.000Z</published>
    <updated>2017-12-04T07:32:42.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="技术篇" scheme="http://fblog.top/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
      <category term="Web前端" scheme="http://fblog.top/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://fblog.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>致即将加入爱阅读的学弟学妹</title>
    <link href="http://fblog.top/2017/07/18/%E8%87%B4%E5%8D%B3%E5%B0%86%E5%8A%A0%E5%85%A5%E7%88%B1%E9%98%85%E8%AF%BB%E7%9A%84%E5%AD%A6%E5%BC%9F%E5%AD%A6%E5%A6%B9/"/>
    <id>http://fblog.top/2017/07/18/致即将加入爱阅读的学弟学妹/</id>
    <published>2017-07-17T16:54:59.000Z</published>
    <updated>2017-12-31T16:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>人生的形式莫过于两种——平庸复制、追求自我。有的人总喜欢听别人的话走别人的路，往往活成了别人，有的人往往独立思考遵从本心，最终活出了自我。</p><p>我前二十年只读过《三字经》和《弟子规》，于是总会给自己一种“凡是人，皆需爱，天同覆，地同载”的博爱情怀，然而时间证明——我聪明却没有智慧，爱人却变得庸碌。这种困境违背了我博爱天下的情怀，让自己感到了极度的讽刺。</p><p>我在余秋雨先生的一句名言中得到了指点，“阅读的最大理由是想摆脱平庸，早一天就多一份人生的精彩；迟一天就多一天平庸的困扰”，这种迫切想改变现状脱离平庸的我刚刚好地遇见了爱阅读，遇见了梦之队，遇见了张老师。一个完美的开始读书的理由，一个互相监督永不缺勤的小组，一位时刻鼓励以身作则的良师益友，我们约定“终身学习”！</p><p>作为90后的我们本应该有周总理那样“为中华之崛起而读书”的爱国情怀，为祖国发展奉献毕生的力量。即便是没有，也应该有“为自己之崛起而读书”的信念，永远脱离平庸，让自己变得明智和自我。</p><p>如果你问我读书不是在接受别人的思想在走别人的路吗？我用阅读心理学理论的创立者鲁巴金的话回答你，“读书是在别人思想的帮助下，建立起自己的思想”，当你书读足够多的时候，你就有了自己的思维体系，你就是你，你就拥有了不再平庸的真真正正的“自我”！</p><p>冯忠森<br>2017年7月16日</p><p><a href="http://mp.weixin.qq.com/s/3jV1_QVBxxBqfQZkLbyilQ" target="_blank" rel="noopener">阅读原文</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人生的形式莫过于两种——平庸复制、追求自我。有的人总喜欢听别人的话走别人的路，往往活成了别人，有的人往往独立思考遵从本心，最终活出了自我。&lt;/p&gt;
&lt;p&gt;我前二十年只读过《三字经》和《弟子规》，于是总会给自己一种“凡是人，皆需爱，天同覆，地同载”的博爱情怀，然而时间证明——
      
    
    </summary>
    
      <category term="文学篇" scheme="http://fblog.top/categories/%E6%96%87%E5%AD%A6%E7%AF%87/"/>
    
    
      <category term="随笔" scheme="http://fblog.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Git学习指南</title>
    <link href="http://fblog.top/2017/07/06/Git%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/"/>
    <id>http://fblog.top/2017/07/06/Git学习指南/</id>
    <published>2017-07-06T13:31:04.000Z</published>
    <updated>2017-12-31T16:55:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>本技术路线并不针对所有人，只是我在技术生涯中，根据我个人的发展路线总结出来的一个套路，下面将按照学习的先后次序依次列举。仅供参考！</p><h2 id="一、Git-学习"><a href="#一、Git-学习" class="headerlink" title="一、Git 学习"></a>一、Git 学习</h2><h3 id="理由："><a href="#理由：" class="headerlink" title="理由："></a>理由：</h3><p>1、git 是每一个“技术人”必备的基本技能之一，也是每个程序员管理自己代码的最优秀的工具。<br>2、git 能让编程新手第一时间接触命令行，更早的养成技术习惯。<br>3、git 学习很简单。</p><h3 id="资料："><a href="#资料：" class="headerlink" title="资料："></a>资料：</h3><p>1、廖雪峰博客：<a href="http://www.liaoxuefeng.com/" target="_blank" rel="noopener">http://www.liaoxuefeng.com/</a><br>2、《Pro Git》：<a href="http://iissnan.com/progit/" target="_blank" rel="noopener">http://iissnan.com/progit/</a></p><h3 id="学习过程："><a href="#学习过程：" class="headerlink" title="学习过程："></a>学习过程：</h3><p>1、登录 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 官网注册一个GitHub账号，用来学习和今后使用。<br>2、下载 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a> 并安装。<br>3、紧跟 <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰博客</a> 教程指导。</p><h3 id="寄语："><a href="#寄语：" class="headerlink" title="寄语："></a>寄语：</h3><p>一手 Git，全盘 Get！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;本技术路线并不针对所有人，只是我在技术生涯中，根据我个人的发展路线总结出来的一个套路，下面将按照学习的先后次序依次列举。仅供参考！&lt;/p&gt;

      
    
    </summary>
    
      <category term="技术篇" scheme="http://fblog.top/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
      <category term="Git" scheme="http://fblog.top/tags/Git/"/>
    
  </entry>
  
</feed>
